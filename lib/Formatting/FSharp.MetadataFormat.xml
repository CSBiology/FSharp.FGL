<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.MetadataFormat</name></assembly>
<members>
<member name="T:FSharp.Collections.Tree`1">
<summary>
 Represents a tree with nodes containing values an a list of children

 [omit]
</summary>
</member>
<member name="M:FSharp.Collections.Tree.ofIndentedList``1(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Int32,``0}})">
<summary>
 Turns a list of items with an indentation specified by an integer
 into a tree where indented items are children.
</summary>
</member>
<member name="M:FSharp.Collections.Tree.takeDeeperThan``2(``0,Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Takes elements that are deeper (children) and turns them into nodes
</summary>
</member>
<member name="M:FSharp.Collections.Tree.takeAtLevel``2(``0,Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Takes all elements at the specified level and turns them into nodes
</summary>
</member>
<member name="T:FSharp.Collections.Tree">
<summary>
 [omit]
</summary>
</member>
<member name="M:FSharp.Collections.List.nestUnderLastMatching``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 A function that nests items of the input sequence 
 that do not match a specified predicate under the 
 last item that matches the predicate. 
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionUntilEquals``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions the input list into two parts - the break is added 
 at a point where the list starts with the specified sub-list.
</summary>
</member>
<member name="M:FSharp.Collections.List.startsWith``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Tests whether a list starts with the elements of another
 list (specified as the first parameter)
</summary>
</member>
<member name="M:FSharp.Collections.List.iterInterleaved``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Iterates over the elements of the list and calls the first function for 
 every element. Between each two elements, the second function is called.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionUntilLookahead``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the 
 specified predicate returns &apos;false&apos;) and a rest of the list.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionUntil``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the 
 specified predicate returns &apos;false&apos;) and a rest of the list.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionWhileLookahead``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the specified predicate 
 returns true) and a rest of the list. The predicate gets the entire 
 tail of the list and can perform lookahead.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the 
 specified predicate returns true) and a rest of the list.
</summary>
</member>
<member name="M:FSharp.Collections.List.skipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Skips elements while the predicate returns &apos;true&apos; and then 
 returns the rest of the list as a result.
</summary>
</member>
<member name="M:FSharp.Collections.List.skip``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Skips the specified number of elements. Fails if the list is smaller.
</summary>
</member>
<member name="M:FSharp.Collections.List.singleton``1(``0)">
<summary>
 Returns a singleton list containing a specified value
</summary>
</member>
<member name="T:FSharp.Collections.List">
<summary>
 [omit]
</summary>
</member>
<member name="M:FSharp.Patterns.|Command|_|``2(``0,System.Collections.Generic.IDictionary{``0,``1})">
<summary>
 Lookup in a dictionary
</summary>
</member>
<member name="M:FSharp.Patterns.|ParseCommand|_|(System.String)">
<summary>
 Utility for parsing commands - this deals with a single command.
 The key of the command should be identifier with just 
 characters in it - otherwise, the parsing fails.
</summary>
</member>
<member name="M:FSharp.Patterns.|ParseCommands|_|(System.String)">
<summary>
 Utility for parsing commands. Commands can be used in different places. We 
 recognize `key1=value, key2=value` and also `key1:value, key2:value`
 The key of the command should be identifier with just 
 characters in it - otherwise, the parsing fails.
</summary>
</member>
<member name="M:FSharp.Patterns.|Let|``2(``0,``1)">
<summary>
 Parameterized pattern that assigns the specified value to the 
 first component of a tuple. Usage:

    match str with
    | Let 1 (n, &quot;one&quot;) | Let 2 (n, &quot;two&quot;) -&gt; n
 
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TrimParagraphLines|(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,FSharp.Formatting.Common.MarkdownRange}})">
<summary>
 Trims all lines of the current paragraph
</summary>
</member>
<member name="P:FSharp.Patterns.Lines.|TrimBlankStart|">
<summary>
 Removes whitespace lines from the beginning of the list
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TakeCodeBlock|_|(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,FSharp.Formatting.Common.MarkdownRange}})">
<summary>
 Matches when there are some lines at the beginning that are
 either empty (or whitespace) or start with at least 4 spaces (a tab counts as 4 spaces here).
 Returns all such lines from the beginning until a different line and
 the number of spaces the first line started with.
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TakeStartingWithOrBlank|_|(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Matches when there are some lines at the beginning that are 
 either empty (or whitespace) or start with the specified string.
 Returns all such lines from the beginning until a different line.
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TrimBlank|``1(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,``0}})">
<summary>
 Removes blank lines from the start and the end of a list
</summary>
</member>
<member name="M:FSharp.Patterns.List.|AsString|(Microsoft.FSharp.Collections.FSharpList{System.Char})">
<summary>
 Returns a list of characters as a string.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|BracketDelimited|_|(System.Char,System.Char,Microsoft.FSharp.Collections.FSharpList{System.Char})">
<summary>
 Matches a list if it starts with a bracketed list. Nested brackets
 are skipped (by counting opening and closing brackets) and can be 
 escaped using the &apos;\&apos; symbol.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|Delimited|_|``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Matches a list if it starts with a sub-list that is delimited
 using the specified delimiter. Returns a wrapped list and the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|StartsWith|_|``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Matches a list if it starts with a sub-list. Returns the list.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|DelimitedWith|_|``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Matches a list if it starts with a sub-list that is delimited
 using the specified delimiters. Returns a wrapped list and the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|EqualsRepeated|_|(System.String,FSharp.Formatting.Common.MarkdownRange,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string consists of some number of 
 complete repetitions of a specified sub-string.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithWrapped|_|(System.String,System.String,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with a sub-string wrapped using the 
 opening and closing sub-string specified in the parameter.
 For example &quot;[aa]bc&quot; is wrapped in [ and ] pair. Returns the wrapped
 text together with the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithRepeated|_|(System.String,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with a non-zero number of complete
 repetitions of the specified parameter (and returns the number
 of repetitions, together with the rest of the string)

    let (StartsWithRepeated &quot;/\&quot; (2, &quot; abc&quot;)) = &quot;/\/\ abc&quot;

</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsAndEndsWithTrim|_|(System.String,System.String,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with the given value and ends 
 with a given value (and returns trimmed body)
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsAndEndsWith|_|(System.String,System.String,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with the given value and ends 
 with a given value (and returns the rest of it)
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithNTimesTrimIgnoreStartWhitespace|_|(System.String,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with the specified sub-string (ignoring whitespace at the start)
 The matched string is trimmed from all whitespace.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithTrim|_|(System.String,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with the specified sub-string
 The matched string is trimmed from all whitespace.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWith|_|(System.String,System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with the specified sub-string
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithAny|_|(System.Collections.Generic.IEnumerable{System.String},System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string starts with any of the specified sub-strings
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimStartAndCount|(System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Returns a string trimmed from the start together with 
 the number of skipped whitespace characters
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimEndUsing|(System.Collections.Generic.IEnumerable{System.Char},System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Returns a string trimmed from the end using characters given as a parameter
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimStart|(System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Returns a string trimmed from the start
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimEnd|(System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Returns a string trimmed from the end
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimBoth|(System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Returns a string trimmed from both start and end
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|Unindented|_|(System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string does starts with non-whitespace
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|WhiteSpace|_|(System.String,FSharp.Formatting.Common.MarkdownRange)">
<summary>
 Matches when a string is a whitespace or null
</summary>
</member>
<member name="M:FSharp.Patterns.String.removeSpaces(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Given a list of lines indented with certan number of whitespace 
 characters (spaces), remove the spaces from the beginning of each line 
 and return the string as a list of lines
</summary>
</member>
<member name="M:FSharp.Patterns.String.|SkipSingleLine|(System.String)">
<summary>
 Ignores everything until a end-line character is detected, returns the remaining string.
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsWithWrapped|_|(System.String,System.String,System.String)">
<summary>
 Matches when a string starts with a sub-string wrapped using the 
 opening and closing sub-string specified in the parameter.
 For example &quot;[aa]bc&quot; is wrapped in [ and ] pair. Returns the wrapped
 text together with the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsAndEndsWithTrim|_|(System.String,System.String,System.String)">
<summary>
 Matches when a string starts with the given value and ends 
 with a given value (and returns trimmed body)
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsAndEndsWith|_|(System.String,System.String,System.String)">
<summary>
 Matches when a string starts with the given value and ends 
 with a given value (and returns the rest of it)
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsWithTrim|_|(System.String,System.String)">
<summary>
 Matches when a string starts with the specified sub-string
 The matched string is trimmed from all whitespace.
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsWith|_|(System.String,System.String)">
<summary>
 Matches when a string starts with the specified sub-string
</summary>
</member>
<member name="M:FSharp.Patterns.String.|TrimBoth|(System.String)">
<summary>
 Returns a string trimmed from both start and end
</summary>
</member>
<member name="M:FSharp.Patterns.String.|WhiteSpace|_|(System.String)">
<summary>
 Matches when a string is a whitespace or null
</summary>
</member>
<member name="M:FSharp.MetadataFormat.MetadataFormat.Generate(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}})">
<summary>
 This overload generates documentation for multiple files specified by the `dllFiles` parameter
</summary>
</member>
<member name="M:FSharp.MetadataFormat.MetadataFormat.Generate(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}})">
<summary>
 generates documentation for multiple files specified by the `dllFiles` parameter
</summary>
</member>
<member name="M:FSharp.MetadataFormat.MetadataFormat.Generate(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}})">
<summary>
 This overload generates documentation for a single file specified by the `dllFile` parameter
</summary>
</member>
<member name="T:FSharp.MetadataFormat.MetadataFormat">
<summary>
 This type exposes the functionality for producing documentation model from `dll` files with associated `xml` files
 generated by the F# or C# compiler. To generate documentation model, use one of the overloades of the `Generate` method.
 The overloads have the following optional parameters:

  - `parameters` - provides additional parameters to the Razor templates
  - `xmlFile` - can be used to override the default name of the XML file (by default, we assume
     the file has the same name as the DLL)
  - `markDownComments` - specifies if you want to use the Markdown parser for in-code comments.
    With `markDownComments` enabled there is no support for `&lt;see cref=&quot;&quot;&gt;` links, so `false` is
    recommended for C# assemblies (if not specified, `true` is used).
  - `sourceFolder` and `sourceRepo` - When specified, the documentation generator automatically
    generates links to GitHub pages for each of the entity.
  - `publicOnly` - When set to `false`, the tool will also generate documentation for non-public members
  - `libDirs` - Use this to specify additional paths where referenced DLL files can be found
  - `otherFlags` - Additional flags that are passed to the F# compiler (you can use this if you want to
    specify references explicitly etc.)
  - `urlRangeHighlight` - A function that can be used to override the default way of generating GitHub links

</summary>
</member>
<member name="T:FSharp.MetadataFormat.Html">
<summary>
 For use in the tempaltes (lives in namespace FSharp.MetadataFormat)
</summary>
</member>
<member name="P:FSharp.MetadataFormat.TypeInfo.ParentModule">
<summary>
 The parent module, if any.
</summary>
</member>
<member name="P:FSharp.MetadataFormat.TypeInfo.Namespace">
<summary>
 The namespace the type belongs to
</summary>
</member>
<member name="P:FSharp.MetadataFormat.TypeInfo.Assembly">
<summary>
 The assembly group the type belongs to
</summary>
</member>
<member name="P:FSharp.MetadataFormat.TypeInfo.Type">
<summary>
 The actual type
</summary>
</member>
<member name="T:FSharp.MetadataFormat.TypeInfo">
<summary>
 Highlevel information about a type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.ModuleInfo.ParentModule">
<summary>
 The parent module, if any.
</summary>
</member>
<member name="P:FSharp.MetadataFormat.ModuleInfo.Namespace">
<summary>
 The namespace the module belongs to
</summary>
</member>
<member name="P:FSharp.MetadataFormat.ModuleInfo.Assembly">
<summary>
 The assembly group the module belongs to
</summary>
</member>
<member name="P:FSharp.MetadataFormat.ModuleInfo.Module">
<summary>
 The actual module
</summary>
</member>
<member name="T:FSharp.MetadataFormat.ModuleInfo">
<summary>
 Highlevel information about a module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.AssemblyGroup.Namespaces">
<summary>
 All namespaces in the group
</summary>
</member>
<member name="P:FSharp.MetadataFormat.AssemblyGroup.Assemblies">
<summary>
 All assemblies in the group
</summary>
</member>
<member name="P:FSharp.MetadataFormat.AssemblyGroup.Name">
<summary>
 Name of the group
</summary>
</member>
<member name="T:FSharp.MetadataFormat.AssemblyGroup">
<summary>
 Represents a group of assemblies
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Namespace.Types">
<summary>
 All types in the namespace
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Namespace.Modules">
<summary>
 All modules in the namespace
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Namespace.Name">
<summary>
 The name of the namespace
</summary>
</member>
<member name="T:FSharp.MetadataFormat.Namespace">
<summary>
 Represents a namespace
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.ActivePatterns">
<summary>
 Active patterns of the module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.TypeExtensions">
<summary>
 Type extensions of the module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.ValuesAndFuncs">
<summary>
 Values and functions of the module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.NestedTypes">
<summary>
 All nested types
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.NestedModules">
<summary>
 All nested modules
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.AllMembers">
<summary>
 All members of the module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.Attributes">
<summary>
 The declared attributes of the module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.Assembly">
<summary>
 The name of the modules assembly
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.Comment">
<summary>
 The attached comment
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.UrlName">
<summary>
 The url
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.Category">
<summary>
 The category of the module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.Name">
<summary>
 The name of the module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.ObsoleteMessage">
<summary>
 Returns the obsolete message, when this member is obsolete. When its not or no message was specified, an empty string is returned
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Module.IsObsolete">
<summary>
 Gets a value indicating whether this member is obsolete
</summary>
</member>
<member name="T:FSharp.MetadataFormat.Module">
<summary>
 Represents an F# module
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.StaticMembers">
<summary>
 The static members of the type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.InstanceMembers">
<summary>
 The instance members of the type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.Constructors">
<summary>
 The constuctorsof the type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.AllMembers">
<summary>
 All members of the type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.StaticParameters">
<summary>
 Static parameters
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.RecordFields">
<summary>
 The fields of a record type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.UnionCases">
<summary>
 The cases of a union type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.Attributes">
<summary>
 The declared attributes of the type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.Assembly">
<summary>
 The name of the type&apos;s assembly
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.Comment">
<summary>
 The attached comment
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.UrlName">
<summary>
 The url
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.Category">
<summary>
 The category of the type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.Name">
<summary>
 The name of the type
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.ObsoleteMessage">
<summary>
 Returns the obsolete message, when this member is obsolete. When its not or no message was specified, an empty string is returned
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Type.IsObsolete">
<summary>
 Gets a value indicating whether this member is obsolete
</summary>
</member>
<member name="T:FSharp.MetadataFormat.Type">
<summary>
 Represents an F# type.
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.Comment">
<summary>
 The attached comment
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.Details">
<summary>
 Additional details
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.Kind">
<summary>
 The kind of the member
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.Category">
<summary>
 The category
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.Attributes">
<summary>
 The declared attributes of the member
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.Name">
<summary>
 Name of the member
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.ObsoleteMessage">
<summary>
 Returns the obsolete message, when this member is obsolete. When its not or no message was specified, an empty string is returned
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Member.IsObsolete">
<summary>
 Gets a value indicating whether this member is obsolete
</summary>
</member>
<member name="T:FSharp.MetadataFormat.Member">
<summary>
 Represents an F# method, property, constructor, function or value, record field, union case or static parameter. Includes extension members
</summary>
</member>
<member name="T:FSharp.MetadataFormat.MemberKind">
<summary>
 Represents the kind of member
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.CompiledName">
<summary>
 The members compiled name, if any
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.SourceLocation">
<summary>
 The members source location, if any
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.Signature">
<summary>
 The members signature
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.TypeArguments">
<summary>
 The members type arguments
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.Modifiers">
<summary>
 The members modifiers
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.Usage">
<summary>
 Formats usage
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.FormatTypeArguments">
<summary>
 Formats type arguments
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.FormatSourceLocation">
<summary>
 Formats source location
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.FormatModifiers">
<summary>
 Formats modifiers
</summary>
</member>
<member name="P:FSharp.MetadataFormat.MemberOrValue.FormatCompiledName">
<summary>
 Formats the compiled name
</summary>
</member>
<member name="M:FSharp.MetadataFormat.MemberOrValue.FormatUsage(System.Int32)">
<summary>
 Formats usage
</summary>
</member>
<member name="T:FSharp.MetadataFormat.MemberOrValue">
<summary>
 Represents the details of an F# method, property, event, function or value, including extension members
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Attribute.NamedConstructorArguments">
<summary>
 The named arguments for the attribute
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Attribute.ConstructorArguments">
<summary>
 The arguments to the constructor for the attribute
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Attribute.FullName">
<summary>
 The qualified name of the attribute
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Attribute.Name">
<summary>
 The name of the attribute
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Attribute.ObsoleteMessage">
<summary>
 Returns the obsolete message, when this attribute is the System.ObsoleteAttribute. When its not or no message was specified, an empty string is returned
</summary>
</member>
<member name="P:FSharp.MetadataFormat.Attribute.IsObsoleteAttribute">
<summary>
 Gets a value indicating whether this attribute the System.ObsoleteAttribute
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Attribute.TryGetObsoleteMessage(System.Collections.Generic.IEnumerable{FSharp.MetadataFormat.Attribute})">
<summary>
 Tries to find the System.ObsoleteAttribute and return its obsolete message
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Attribute.FormatLongForm">
<summary>
 Formats the attribute using the Name. Keeps the &quot;Attribute&quot;-suffix. E.g ObsoleteAttribute
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Attribute.FormatFullNameLongForm">
<summary>
 Formats the attribute using the FullName. Keeps the &quot;Attribute&quot;-suffix. E.g System.ObsoleteAttribute
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Attribute.FormatFullName">
<summary>
 Formats the attribute using the FullName. Removes the &quot;Attribute&quot;-suffix. E.g System.Obsolete
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Attribute.Format">
<summary>
 Formats the attribute using the Name. Removes the &quot;Attribute&quot;-suffix. E.g Obsolete
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Attribute.Format(System.String,System.Boolean)">
<summary>
 Formats the attribute with the given name
</summary>
</member>
<member name="T:FSharp.MetadataFormat.Attribute">
<summary>
 Represents a custom attribute attached to F# source code
</summary>
</member>
<member name="T:FSharp.MetadataFormat.Comment">
<summary>
 Represents a comment attached to F# source code
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.readCommentsInto``1(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpSymbol,FSharp.MetadataFormat.ValueReader.ReadingContext,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.FSharp.Core.FSharpFunc{FSharp.MetadataFormat.Comment,``0}}})">
<summary>
 Reads XML documentation comments and calls the specified function
 to parse the rest of the entity, unless [omit] command is set.
 The function is called with category name, commands &amp; comment.
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.addMissingLinkToTypes(FSharp.MetadataFormat.ValueReader.ReadingContext,FSharp.Literate.LiterateDocument)">
<summary>
 Adds the missing links to types to the document defined links
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.wrapInlineCodeLinksInParagraphs(FSharp.MetadataFormat.ValueReader.ReadingContext,FSharp.Markdown.MarkdownParagraph)">
<summary>
 Wraps inside an `IndirectLink` all inline code spans in the paragraph that can be converted to a link
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.wrapInlineCodeLinksInSpans(FSharp.MetadataFormat.ValueReader.ReadingContext,FSharp.Markdown.MarkdownSpan)">
<summary>
 Wraps the span inside an `IndirectLink` if it is an inline code that can be converted to a link
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.addLinkToType(FSharp.Literate.LiterateDocument,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.String,FSharp.MetadataFormat.ValueReader.CrefReference}})">
<summary>
 Adds a cross-type link to the document defined links
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.getTypeLink(FSharp.MetadataFormat.ValueReader.ReadingContext,System.String)">
<summary>
 Returns a tuple of the undefined link and its Cref if it exists
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.linkNotDefined(FSharp.Literate.LiterateDocument,System.String)">
<summary>
 Returns whether the link is not included in the document defined links
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.collectParagraphIndirectLinks(FSharp.Markdown.MarkdownParagraph)">
<summary>
 Returns all indirect links in the specified paragraph node
</summary>
</member>
<member name="M:FSharp.MetadataFormat.Reader.collectSpanIndirectLinks(FSharp.Markdown.MarkdownSpan)">
<summary>
 Returns all indirect links in a specified span node
</summary>
</member>
<member name="T:FSharp.MetadataFormat.ExtensionMethods">
<summary>
 [omit]
</summary>
</member>
</members>
</doc>
