[{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-algorithms-louvain.html","title":"ArrayAdjacencyGraph.Algorithms.Louvain","content":"Louvain"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-barabasialbert.html","title":"ArrayAdjacencyGraph.Models.BarabasiAlbert","content":"BarabasiAlbert"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-gilbert.html","title":"ArrayAdjacencyGraph.Models.Gilbert","content":"Gilbert"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-scale_free_graph.html","title":"ArrayAdjacencyGraph.Models.Scale_free_graph","content":"BollobasRiordan"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph.html","title":"FSharp.ArrayAdjacencyGraph","content":"Edges \nVertices \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl.html","title":"FSharp.FGL","content":"Graph \nLenses \nVertices \nAdj\u003C\u0027Vertex, \u0027Edge\u003E \nContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E \nGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E \nMAdj\u003C\u0027Vertex, \u0027Edge\u003E \nMContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-algorithm.html","title":"FSharp.FGL.Algorithm","content":"Models"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed.html","title":"FSharp.FGL.Directed","content":"Edges \nGraph \nModels \nVertices"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected.html","title":"FSharp.FGL.Undirected","content":"Edges \nGraph \nVertices"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph.html","title":"FSharp.Graph","content":"Edge\u003C\u0027Vertex\u003E \nLEdge\u003C\u0027Vertex, \u0027Edge\u003E \nLVertex\u003C\u0027Vertex, \u0027Label\u003E"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io.html","title":"FSharp.Graph.IO","content":"GDF"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-algorithms-louvain-louvain.html","title":"Louvain","content":"Louvain \n\nLouvain method for community detection\n \nLouvain.louvain \nlouvain \nLouvain.louvainRandom \nlouvainRandom"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-algorithms-louvain-louvain.html#louvain","title":"Louvain.louvain","content":"Louvain.louvain \nlouvain \n\n Takes an ArrayAdjacencyGraph and returns a new graph whose Labels have been transformed into tupels, where the second part is the community accorging to modularity-optimization. \n Parameters:\n\n graph : ArrayAdjacencyGraph, that is used as the template for the modularity optimization.\n\n modularityIncreaseThreshold : Threshold of modularity-difference that has to be exceeded in order to be recognized as a modularity-increase.\n The value has to be between 0. and 1. to get a meaningful result. The smaller the value, the longer the calculation takes.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-algorithms-louvain-louvain.html#louvainRandom","title":"Louvain.louvainRandom","content":"Louvain.louvainRandom \nlouvainRandom \n\n Takes an ArrayAdjacencyGraph and returns a new graph whose Labels have been transformed into tupels, where the second part is the community accorging to modularity-optimization.\n In addition, the modularity optimization is carried out in a random order\n\n Parameters:\n\n graph : ArrayAdjacencyGraph, that is used as the template for the modularity optimization.\n\n modularityIncreaseThreshold : Threshold of modularity-difference that has to be exceeded in order to be recognized as a modularity-increase.\n The value has to be between 0. and 1. to get a meaningful result. The smaller the value, the longer the calculation takes.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-barabasialbert-barabasialbert.html","title":"BarabasiAlbert","content":"BarabasiAlbert \n \nBarabasiAlbert.barabasiAlbert \nbarabasiAlbert"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-barabasialbert-barabasialbert.html#barabasiAlbert","title":"BarabasiAlbert.barabasiAlbert","content":"BarabasiAlbert.barabasiAlbert \nbarabasiAlbert \n\n Returns an ArrayAdjacencyGraph that was randomly grown according to the Barab\u00E1si\u2013Albert model with the given parameters. \n\n startingGraph is the original graph, that is used as the initial connected network. The rest of the calculations and growth of the network are performed on this graph.\n\n numberOfVertices specifies how many additional vertices the final graph will have.\n\n numberOfEdgesPerIteration specifies how many edges should be added to the graph per iteration.\n\n fVertexKey is a function that is used to transform an integer (the index of the vertex) into the \u0027Vertex type.  \n\n fLabel is a function that transforms the \u0027Vertex type into a label of the \u0027Label type.   \n\n fWeight is a funtion that takes two \u0027Vertices and returns a weight between them in form of an \u0027Edge type.    \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-gilbert-gilbert.html","title":"Gilbert","content":"Gilbert \n \nGilbert.gilbert \ngilbert"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-gilbert-gilbert.html#gilbert","title":"Gilbert.gilbert","content":"Gilbert.gilbert \ngilbert \n\n Returns an ArrayAdjacencyGraph that is generated randomly with the given parameters.\n\n numberOfVertices indicates the number of vertices the final graph will have. \n\n probability represents the probability of an edge between 2 vertices.   \n\n fVertexKey is a function that is used to transform an integer (the index of the vertex) into the \u0027Vertex type.  \n\n fLabel is a function that transforms the \u0027Vertex type into a label of the \u0027Label type.   \n\n fWeight is a funtion that takes two \u0027Vertices and returns a weight between them in form of an \u0027Edge type.    \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-scale_free_graph-bollobasriordan.html","title":"BollobasRiordan","content":"BollobasRiordan \n \nBollobasRiordan.bollobasRiordan \nbollobasRiordan"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/arrayadjacencygraph-models-scale_free_graph-bollobasriordan.html#bollobasRiordan","title":"BollobasRiordan.bollobasRiordan","content":"BollobasRiordan.bollobasRiordan \nbollobasRiordan \n\n Returns a randomly generated, directed, scale free ArrayAdjacencyGraph, based on the given paramters.\n\n   n : integer\n       Number of nodes in graph\n\n   alpha : float\n       Probability for adding a new node connected to an existing node\n       chosen randomly according to the in-degree distribution.\n\n   beta : float\n       Probability for adding an edge between two existing nodes.\n       One existing node is chosen randomly according the in-degree\n       distribution and the other chosen randomly according to the out-degree\n       distribution.\n\n   gamma : float\n       Probability for adding a new node connected to an existing node\n       chosen randomly according to the out-degree distribution.\n\n   delta_in : float\n       Bias for choosing nodes from in-degree distribution.\n\n   delta_out : float\n       Bias for choosing nodes from out-degree distribution.\n\n   create_using : an ArrayAdjacencyGraph, that can be used as basis for the graph generation. If the given graph has less than 3 vertices, a hard-coded example is used instead. \nThe sum of \u0060alpha\u0060, \u0060beta\u0060, and \u0060gamma\u0060 must be 1. \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html","title":"Edges","content":"Edges \n \nEdges.tryGetEdge \ntryGetEdge \nEdges.getEdge \ngetEdge \nEdges.tryGetEdges \ntryGetEdges \nEdges.getEdges \ngetEdges \nEdges.getAllEdges \ngetAllEdges \nEdges.edgeCount \nedgeCount \nEdges.containsEdge \ncontainsEdge \nEdges.tryGetConnectedEdges \ntryGetConnectedEdges \nEdges.getConnectedEdges \ngetConnectedEdges \nEdges.tryGetInEdges \ntryGetInEdges \nEdges.getInEdges \ngetInEdges \nEdges.tryGetOutEdges \ntryGetOutEdges \nEdges.getOutEdges \ngetOutEdges \nEdges.tryGetWeight \ntryGetWeight \nEdges.getWeight \ngetWeight \nEdges.setWeight \nsetWeight \nEdges.addEdge \naddEdge \nEdges.addManyEdges \naddManyEdges \nEdges.removeEdge \nremoveEdge \nEdges.removeManyEdges \nremoveManyEdges"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#tryGetEdge","title":"Edges.tryGetEdge","content":"Edges.tryGetEdge \ntryGetEdge \n\nLookup the first edge in the graph that matches the conditions, returning a Some value if it exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#getEdge","title":"Edges.getEdge","content":"Edges.getEdge \ngetEdge \n\nReturn the first edge in the graph that matches the conditions.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#tryGetEdges","title":"Edges.tryGetEdges","content":"Edges.tryGetEdges \ntryGetEdges \n\nLookup all edges in the graph that matches the conditions, returning a Some value if it exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#getEdges","title":"Edges.getEdges","content":"Edges.getEdges \ngetEdges \n\nReturn all edges in the graph that matches the conditions\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#getAllEdges","title":"Edges.getAllEdges","content":"Edges.getAllEdges \ngetAllEdges \n\nReturns all edges of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#edgeCount","title":"Edges.edgeCount","content":"Edges.edgeCount \nedgeCount \n\nNumber of edges in the graph\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#containsEdge","title":"Edges.containsEdge","content":"Edges.containsEdge \ncontainsEdge \n\nReturns true, if the edge is found in the graph, else false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#tryGetConnectedEdges","title":"Edges.tryGetConnectedEdges","content":"Edges.tryGetConnectedEdges \ntryGetConnectedEdges \n\nLookup all edges connected to the vertex v in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#getConnectedEdges","title":"Edges.getConnectedEdges","content":"Edges.getConnectedEdges \ngetConnectedEdges \n\nLookup all edges connected to the vertex v in the graph, returning an array of connected edges.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#tryGetInEdges","title":"Edges.tryGetInEdges","content":"Edges.tryGetInEdges \ntryGetInEdges \n\nLookup all edges that target the vertex v in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#getInEdges","title":"Edges.getInEdges","content":"Edges.getInEdges \ngetInEdges \n\nLookup all edges that target the vertex v in the graph, returning an array of connected edges.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#tryGetOutEdges","title":"Edges.tryGetOutEdges","content":"Edges.tryGetOutEdges \ntryGetOutEdges \n\nLookup all edges that originate from the vertex v in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#getOutEdges","title":"Edges.getOutEdges","content":"Edges.getOutEdges \ngetOutEdges \n\nLookup all edges that originate from the vertex v in the graph, returning an array of connected edges.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#tryGetWeight","title":"Edges.tryGetWeight","content":"Edges.tryGetWeight \ntryGetWeight \n\nLookup the weight of the edge defined by source and vertex. If it exists, return Some value, else none.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#getWeight","title":"Edges.getWeight","content":"Edges.getWeight \ngetWeight \n\nReturn the weight of the edge defined by source and vertex\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#setWeight","title":"Edges.setWeight","content":"Edges.setWeight \nsetWeight \n\nReturn a new graph where the weight for the given edge was adapted.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#addEdge","title":"Edges.addEdge","content":"Edges.addEdge \naddEdge \n\nReturns a new graph where the given edge was added.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#addManyEdges","title":"Edges.addManyEdges","content":"Edges.addManyEdges \naddManyEdges \n\nReturns a new graph where the given edges were added.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#removeEdge","title":"Edges.removeEdge","content":"Edges.removeEdge \nremoveEdge \n\nReturns a new graph where the given edge was removed from the original graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-edges.html#removeManyEdges","title":"Edges.removeManyEdges","content":"Edges.removeManyEdges \nremoveManyEdges \n\nReturns a new graph where the given edges were removed from the original graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html","title":"Vertices","content":"Vertices \n \nVertices.contains \ncontains \nVertices.count \ncount \nVertices.get \nget \nVertices.degree \ndegree \nVertices.inDegree \ninDegree \nVertices.outDegree \noutDegree \nVertices.weightedDegree \nweightedDegree \nVertices.connectedEdgesEmpty \nconnectedEdgesEmpty \nVertices.addVertex \naddVertex \nVertices.addManyVertices \naddManyVertices \nVertices.removeVertex \nremoveVertex \nVertices.removeManyVertices \nremoveManyVertices \nVertices.tryPredecessors \ntryPredecessors \nVertices.predecessors \npredecessors \nVertices.trySuccessors \ntrySuccessors \nVertices.successors \nsuccessors \nVertices.tryNeighbours \ntryNeighbours \nVertices.neighbours \nneighbours \nVertices.tryGetLabel \ntryGetLabel \nVertices.getLabel \ngetLabel \nVertices.setLabel \nsetLabel \nVertices.getLabels \ngetLabels"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#contains","title":"Vertices.contains","content":"Vertices.contains \ncontains \n\nReturns true, if the graph contains the vertex, else false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#count","title":"Vertices.count","content":"Vertices.count \ncount \n\nReturns the number of vertices of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#get","title":"Vertices.get","content":"Vertices.get \nget \n\nReturns the vertices of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#degree","title":"Vertices.degree","content":"Vertices.degree \ndegree \n\nReturns the degree of the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#inDegree","title":"Vertices.inDegree","content":"Vertices.inDegree \ninDegree \n\nReturns the number of edges that originate from the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#outDegree","title":"Vertices.outDegree","content":"Vertices.outDegree \noutDegree \n\nReturns the number of edges that target the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#weightedDegree","title":"Vertices.weightedDegree","content":"Vertices.weightedDegree \nweightedDegree \n\nReturns the weighted degree of the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#connectedEdgesEmpty","title":"Vertices.connectedEdgesEmpty","content":"Vertices.connectedEdgesEmpty \nconnectedEdgesEmpty \n\nReturns true, if the vertex v does not have edges connected to it. Otherwise, it returns false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#addVertex","title":"Vertices.addVertex","content":"Vertices.addVertex \naddVertex \n\nReturns a new graph with the given vertex added.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#addManyVertices","title":"Vertices.addManyVertices","content":"Vertices.addManyVertices \naddManyVertices \n\nReturns a new graph with the given vertices added.    \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#removeVertex","title":"Vertices.removeVertex","content":"Vertices.removeVertex \nremoveVertex \n\nReturns a new graph where the given vertex is removed.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#removeManyVertices","title":"Vertices.removeManyVertices","content":"Vertices.removeManyVertices \nremoveManyVertices \n\nReturns a new graph where the given vertices are removed.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#tryPredecessors","title":"Vertices.tryPredecessors","content":"Vertices.tryPredecessors \ntryPredecessors \n\nReturns Some vertices if they are predecessors of the vertex, else None.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#predecessors","title":"Vertices.predecessors","content":"Vertices.predecessors \npredecessors \n\nReturns the preceding vertices of the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#trySuccessors","title":"Vertices.trySuccessors","content":"Vertices.trySuccessors \ntrySuccessors \n\nReturns Some vertices if they are successors of the vertex, else None.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#successors","title":"Vertices.successors","content":"Vertices.successors \nsuccessors \n\nReturns the succeeding vertices of the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#tryNeighbours","title":"Vertices.tryNeighbours","content":"Vertices.tryNeighbours \ntryNeighbours \n\nReturns Some vertices if they are neighbours of the vertex, else None.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#neighbours","title":"Vertices.neighbours","content":"Vertices.neighbours \nneighbours \n\nReturns the neighbouring edges of the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#tryGetLabel","title":"Vertices.tryGetLabel","content":"Vertices.tryGetLabel \ntryGetLabel \n\nReturns Some label, if a label for the vertex v exists, else none.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#getLabel","title":"Vertices.getLabel","content":"Vertices.getLabel \ngetLabel \n\nReturns the label for the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#setLabel","title":"Vertices.setLabel","content":"Vertices.setLabel \nsetLabel \n\nRetunrs a new graph where the label for the vertex v is the given label.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-vertices.html#getLabels","title":"Vertices.getLabels","content":"Vertices.getLabels \ngetLabels \n\nReturns all labels of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E \n\n  A mutable directed graph data structure efficient for large sparse graph representations\n \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.( .ctor ) \n( .ctor ) \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.( .ctor ) \n( .ctor ) \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddEdge \nAddEdge \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddManyEdges \nAddManyEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddManyVertices \nAddManyVertices \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddVertex \nAddVertex \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ConnectedEdgesEmpty \nConnectedEdgesEmpty \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ContainsEdge \nContainsEdge \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ContainsVertex \nContainsVertex \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Copy \nCopy \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Degree \nDegree \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetConnectedEdges \nGetConnectedEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdge \nGetEdge \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdges \nGetEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdges \nGetEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetInEdges \nGetInEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetLabel \nGetLabel \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetLabels \nGetLabels \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetOutEdges \nGetOutEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetVertices \nGetVertices \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetWeight \nGetWeight \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.InDegree \nInDegree \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Neighbours \nNeighbours \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.OutDegree \nOutDegree \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Predecessors \nPredecessors \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveEdge \nRemoveEdge \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveManyEdges \nRemoveManyEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveManyVertices \nRemoveManyVertices \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveVertex \nRemoveVertex \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.SetLabel \nSetLabel \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.SetWeight \nSetWeight \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Successors \nSuccessors \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetConnectedEdges \nTryGetConnectedEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetEdge \nTryGetEdge \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetEdges \nTryGetEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetInEdges \nTryGetInEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetLabel \nTryGetLabel \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetOutEdges \nTryGetOutEdges \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetWeight \nTryGetWeight \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryNeighbours \nTryNeighbours \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryPredecessors \nTryPredecessors \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TrySuccessors \nTrySuccessors \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.WeightedDegree \nWeightedDegree \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.EdgeCount \nEdgeCount \nArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.VertexCount \nVertexCount"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#( .ctor )","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.( .ctor )","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#( .ctor )","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.( .ctor )","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#AddEdge","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddEdge","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddEdge \nAddEdge \n\nAdds a labeled, edge to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#AddManyEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddManyEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddManyEdges \nAddManyEdges \n\nAdds an array of labeled, edges to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#AddManyVertices","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddManyVertices","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddManyVertices \nAddManyVertices \n\nAdds an array of labeled vertices to the graph.    \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#AddVertex","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddVertex","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.AddVertex \nAddVertex \n\nAdds a labeled vertex to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#ConnectedEdgesEmpty","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ConnectedEdgesEmpty","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ConnectedEdgesEmpty \nConnectedEdgesEmpty \n\nReturns true, if the vertex v does not have edges connected to it. Otherwise, it returns false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#ContainsEdge","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ContainsEdge","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ContainsEdge \nContainsEdge \n\nReturns true, if the edge is found in the graph, else false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#ContainsVertex","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ContainsVertex","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.ContainsVertex \nContainsVertex \n\nReturns true, if the graph contains the vertex, else false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#Copy","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Copy","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Copy \nCopy \n\nCopys the given graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#Degree","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Degree","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Degree \nDegree \n\nReturns the degree of the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetConnectedEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetConnectedEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetConnectedEdges \nGetConnectedEdges \n\nLookup all edges connected to the vertex v in the graph, returning an array of connected edges.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetEdge","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdge","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdge \nGetEdge \n\nReturn the first edge in the graph that matches the conditions.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdges \nGetEdges \n\nReturns all edges of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetEdges \nGetEdges \n\nReturn all edges in the graph that matches the conditions\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetInEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetInEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetInEdges \nGetInEdges \n\nLookup all edges that target the vertex v in the graph, returning an array of connected edges.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetLabel","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetLabel","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetLabel \nGetLabel \n\nReturns the label for the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetLabels","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetLabels","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetLabels \nGetLabels \n\nReturns all labels of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetOutEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetOutEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetOutEdges \nGetOutEdges \n\nLookup all edges that originate from the vertex v in the graph, returning an array of connected edges.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetVertices","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetVertices","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetVertices \nGetVertices \n\nReturns the vertices of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#GetWeight","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetWeight","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.GetWeight \nGetWeight \n\nReturn the weight of the edge defined by source and vertex\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#InDegree","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.InDegree","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.InDegree \nInDegree \n\nReturns the number of edges that originate from the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#Neighbours","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Neighbours","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Neighbours \nNeighbours \n\nReturns the neighbouring edges of the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#OutDegree","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.OutDegree","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.OutDegree \nOutDegree \n\nReturns the number of edges that target the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#Predecessors","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Predecessors","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Predecessors \nPredecessors \n\nReturns the preceding vertices of the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#RemoveEdge","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveEdge","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveEdge \nRemoveEdge \n\nRemoves an edge from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#RemoveManyEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveManyEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveManyEdges \nRemoveManyEdges \n\nRemoves an array of edges from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#RemoveManyVertices","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveManyVertices","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveManyVertices \nRemoveManyVertices \n\nRemoves an array of vertices from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#RemoveVertex","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveVertex","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.RemoveVertex \nRemoveVertex \n\nRemoves a vertex from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#SetLabel","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.SetLabel","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.SetLabel \nSetLabel \n\nSets the label for the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#SetWeight","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.SetWeight","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.SetWeight \nSetWeight \n\nSet the weight of the LEdge defined by source and vertex to be equal weight.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#Successors","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Successors","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Successors \nSuccessors \n\nReturns the succeeding vertices of the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryGetConnectedEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetConnectedEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetConnectedEdges \nTryGetConnectedEdges \n\nLookup all edges connected to the vertex v in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryGetEdge","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetEdge","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetEdge \nTryGetEdge \n\nLookup the first edge in the graph that matches the conditions, returning a Some value if it exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryGetEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetEdges \nTryGetEdges \n\nLookup all edges in the graph that matches the conditions, returning a Some value if it exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryGetInEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetInEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetInEdges \nTryGetInEdges \n\nLookup all edges that target the vertex v in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryGetLabel","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetLabel","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetLabel \nTryGetLabel \n\nReturns Some label, if a label for the vertex v exists, else none.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryGetOutEdges","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetOutEdges","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetOutEdges \nTryGetOutEdges \n\nLookup all edges that originate from the vertex v in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryGetWeight","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetWeight","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryGetWeight \nTryGetWeight \n\nLookup the weight of the edge defined by source and vertex. If it exists, return Some value, else none.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryNeighbours","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryNeighbours","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryNeighbours \nTryNeighbours \n\nReturns Some vertices if they are neighbours of the vertex, else None.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TryPredecessors","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryPredecessors","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TryPredecessors \nTryPredecessors \n\nReturns Some vertices if they are predecessors of the vertex, else None.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#TrySuccessors","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TrySuccessors","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.TrySuccessors \nTrySuccessors \n\nReturns Some vertices if they are successors of the vertex, else None.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#WeightedDegree","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.WeightedDegree","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.WeightedDegree \nWeightedDegree \n\nReturns the weighted degree of the vertex v.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#EdgeCount","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.EdgeCount","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.EdgeCount \nEdgeCount \n\nNumber of edges in the graph\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-arrayadjacencygraph-arrayadjacencygraph-3.html#VertexCount","title":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.VertexCount","content":"ArrayAdjacencyGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.VertexCount \nVertexCount \n\nReturns the number of vertices of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html","title":"Graph","content":"Graph \n\nGeneral functions for both directed and undirected graphs\n \nGraph.decompose \ndecompose \nGraph.tryDecompose \ntryDecompose \nGraph.decomposeFirst \ndecomposeFirst \nGraph.isEmpty \nisEmpty \nGraph.empty \nempty \nGraph.tryGetContext \ntryGetContext \nGraph.getContext \ngetContext \nGraph.mapContexts \nmapContexts \nGraph.foldContexts \nfoldContexts \nGraph.iterContexts \niterContexts"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#decompose","title":"Graph.decompose","content":"Graph.decompose \ndecompose \n\nLookup a context in the graph. If the binding exists, it returns the context and the graph minus the vertex and its edges. Raising KeyNotFoundException if no binding exists in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#tryDecompose","title":"Graph.tryDecompose","content":"Graph.tryDecompose \ntryDecompose \n\nLookup a context in the graph. If the binding exists, it returns a Some value of the context and the graph minus the vertex and its edges. If it doesn\u0027t exist, returns None and the initial graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#decomposeFirst","title":"Graph.decomposeFirst","content":"Graph.decomposeFirst \ndecomposeFirst \n\nIf the given graph contains at least one vertex, returns a Some value of the first context and the graph minus the associated vertex and its edges. If the graph is empty, returns None and the initial graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#isEmpty","title":"Graph.isEmpty","content":"Graph.isEmpty \nisEmpty \n\nReturns true, if the Graph does not contain any vertices. Returns false, if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#empty","title":"Graph.empty","content":"Graph.empty \nempty \n\nCreates a new, empty graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#tryGetContext","title":"Graph.tryGetContext","content":"Graph.tryGetContext \ntryGetContext \n\nLookup a context in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#getContext","title":"Graph.getContext","content":"Graph.getContext \ngetContext \n\nLookup a context in the graph. Raising KeyNotFoundException if no binding exists in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#mapContexts","title":"Graph.mapContexts","content":"Graph.mapContexts \nmapContexts \n\nMaps contexts of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#foldContexts","title":"Graph.foldContexts","content":"Graph.foldContexts \nfoldContexts \n\nFolds over the contexts in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph.html#iterContexts","title":"Graph.iterContexts","content":"Graph.iterContexts \niterContexts \n\nPerforms a given function on every edge of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-lenses.html","title":"Lenses","content":"Lenses \n\nLenses for working with contexts\n \nLenses.pred_ \npred_ \nLenses.val_ \nval_ \nLenses.succ_ \nsucc_ \nLenses.mpred_ \nmpred_ \nLenses.msucc_ \nmsucc_"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-lenses.html#pred_","title":"Lenses.pred_","content":"Lenses.pred_ \npred_ \n\n Lens for predecessors in a context\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-lenses.html#val_","title":"Lenses.val_","content":"Lenses.val_ \nval_ \n\n Lens for vertex in a context\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-lenses.html#succ_","title":"Lenses.succ_","content":"Lenses.succ_ \nsucc_ \n\n Lens for successors in a context\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-lenses.html#mpred_","title":"Lenses.mpred_","content":"Lenses.mpred_ \nmpred_ \n\n Lens for predecessors in a Mcontext\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-lenses.html#msucc_","title":"Lenses.msucc_","content":"Lenses.msucc_ \nmsucc_ \n\n Lens for successors in a Mcontext\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html","title":"Vertices","content":"Vertices \n\nFunctions for vertices of both directed and undirected graphs\n \nVertices.add \nadd \nVertices.addMany \naddMany \nVertices.remove \nremove \nVertices.removeMany \nremoveMany \nVertices.count \ncount \nVertices.contains \ncontains \nVertices.find \nfind \nVertices.tryFind \ntryFind \nVertices.toVertexList \ntoVertexList \nVertices.map \nmap \nVertices.mapi \nmapi \nVertices.iter \niter \nVertices.iteri \niteri \nVertices.fold \nfold \nVertices.filter \nfilter"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#add","title":"Vertices.add","content":"Vertices.add \nadd \n\nAdds a labeled vertex to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#addMany","title":"Vertices.addMany","content":"Vertices.addMany \naddMany \n\nAdds a list of labeled vertices to the graph.    \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#remove","title":"Vertices.remove","content":"Vertices.remove \nremove \n\nRemoves a vertex from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#removeMany","title":"Vertices.removeMany","content":"Vertices.removeMany \nremoveMany \n\nRemoves a list of vertices from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#count","title":"Vertices.count","content":"Vertices.count \ncount \n\nEvaluates the number of vertices in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#contains","title":"Vertices.contains","content":"Vertices.contains \ncontains \n\nReturns true, if the vertex v is contained in the graph. Otherwise, it returns false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#find","title":"Vertices.find","content":"Vertices.find \nfind \n\nLookup a labeled vertex in the graph. Raising KeyNotFoundException if no binding exists in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#tryFind","title":"Vertices.tryFind","content":"Vertices.tryFind \ntryFind \n\nLookup a labeled vertex in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#toVertexList","title":"Vertices.toVertexList","content":"Vertices.toVertexList \ntoVertexList \n\nCreates a list of all vertices and their labels.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#map","title":"Vertices.map","content":"Vertices.map \nmap \n\nMaps the vertexlabels of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#mapi","title":"Vertices.mapi","content":"Vertices.mapi \nmapi \n\nMaps the vertexlabels of the graph. The mapping function also receives an ascending integer index.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#iter","title":"Vertices.iter","content":"Vertices.iter \niter \n\nPerforms a given function on every vertex and its label of a graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#iteri","title":"Vertices.iteri","content":"Vertices.iteri \niteri \n\nPerforms a given function on every vertex and its label of a graph. The mapping function also receives an ascending integer index.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#fold","title":"Vertices.fold","content":"Vertices.fold \nfold \n\n Applies a function folder to each vertex of the graph, threading an accumulator argument through the computation.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-vertices.html#filter","title":"Vertices.filter","content":"Vertices.filter \nfilter \n\n Returns a new graph containing only the vertices for which the given predicate returns true.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-adj-2.html","title":"Adj\u003C\u0027Vertex, \u0027Edge\u003E","content":"Adj\u003C\u0027Vertex, \u0027Edge\u003E \n\nTuple list of adjacent vertices and the linking edges\n \nAdj\u003C\u0027Vertex, \u0027Edge\u003E.IsEmpty \nIsEmpty \nAdj\u003C\u0027Vertex, \u0027Edge\u003E.Tail \nTail \nAdj\u003C\u0027Vertex, \u0027Edge\u003E.Length \nLength \nAdj\u003C\u0027Vertex, \u0027Edge\u003E.Head \nHead \nAdj\u003C\u0027Vertex, \u0027Edge\u003E.Item \nItem \nAdj\u003C\u0027Vertex, \u0027Edge\u003E.Empty \nEmpty"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-adj-2.html#IsEmpty","title":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.IsEmpty","content":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.IsEmpty \nIsEmpty \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-adj-2.html#Tail","title":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Tail","content":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Tail \nTail \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-adj-2.html#Length","title":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Length","content":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Length \nLength \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-adj-2.html#Head","title":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Head","content":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Head \nHead \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-adj-2.html#Item","title":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Item","content":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Item \nItem \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-adj-2.html#Empty","title":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Empty","content":"Adj\u003C\u0027Vertex, \u0027Edge\u003E.Empty \nEmpty \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-context-3.html","title":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E","content":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E \n\nContext of a vertice as defined by Martin Erwig. Adjacency of type \u0027Adj\u0027\n \nContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item1 \nItem1 \nContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item2 \nItem2 \nContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item3 \nItem3 \nContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item4 \nItem4"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-context-3.html#Item1","title":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item1","content":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item1 \nItem1 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-context-3.html#Item2","title":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item2","content":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item2 \nItem2 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-context-3.html#Item3","title":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item3","content":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item3 \nItem3 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-context-3.html#Item4","title":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item4","content":"Context\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item4 \nItem4 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph-3.html","title":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E","content":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E \n\nMap of Vertices as keys and MContexts as values\n \nGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.IsEmpty \nIsEmpty \nGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Count \nCount \nGraph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item \nItem"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph-3.html#IsEmpty","title":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.IsEmpty","content":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.IsEmpty \nIsEmpty \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph-3.html#Count","title":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Count","content":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Count \nCount \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-graph-3.html#Item","title":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item","content":"Graph\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item \nItem \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-madj-2.html","title":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E","content":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E \n\nMap of adjacent vertices as key and the linking edges as values\n \nMAdj\u003C\u0027Vertex, \u0027Edge\u003E.IsEmpty \nIsEmpty \nMAdj\u003C\u0027Vertex, \u0027Edge\u003E.Count \nCount \nMAdj\u003C\u0027Vertex, \u0027Edge\u003E.Item \nItem"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-madj-2.html#IsEmpty","title":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E.IsEmpty","content":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E.IsEmpty \nIsEmpty \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-madj-2.html#Count","title":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E.Count","content":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E.Count \nCount \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-madj-2.html#Item","title":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E.Item","content":"MAdj\u003C\u0027Vertex, \u0027Edge\u003E.Item \nItem \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-mcontext-3.html","title":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E","content":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E \n\nContext of a vertices as defined by Martin Erwig. Adjacency of type \u0027MAdj\u0027\n \nMContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item1 \nItem1 \nMContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item2 \nItem2 \nMContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item3 \nItem3"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-mcontext-3.html#Item1","title":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item1","content":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item1 \nItem1 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-mcontext-3.html#Item2","title":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item2","content":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item2 \nItem2 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-mcontext-3.html#Item3","title":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item3","content":"MContext\u003C\u0027Vertex, \u0027Label, \u0027Edge\u003E.Item3 \nItem3 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-algorithm-models.html","title":"Models","content":"Models \n\nContains generic functions for creating model graphs\n \nModels.gilbert \ngilbert \nModels.erdosRenyi \nerdosRenyi"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-algorithm-models.html#gilbert","title":"Models.gilbert","content":"Models.gilbert \ngilbert \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-algorithm-models.html#erdosRenyi","title":"Models.erdosRenyi","content":"Models.erdosRenyi \nerdosRenyi \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html","title":"Edges","content":"Edges \n\nFunctions for edges of directed Graphs\n \nEdges.count \ncount \nEdges.contains \ncontains \nEdges.find \nfind \nEdges.tryFind \ntryFind \nEdges.undirect \nundirect \nEdges.rev \nrev \nEdges.tryAdd \ntryAdd \nEdges.add \nadd \nEdges.tryAddMany \ntryAddMany \nEdges.addMany \naddMany \nEdges.remove \nremove \nEdges.removeMany \nremoveMany \nEdges.toEdgeList \ntoEdgeList \nEdges.map \nmap \nEdges.iter \niter \nEdges.iteri \niteri \nEdges.fold \nfold \nEdges.filter \nfilter"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#count","title":"Edges.count","content":"Edges.count \ncount \n\nEvaluates the number of edges in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#contains","title":"Edges.contains","content":"Edges.contains \ncontains \n\nReturns true, if the edge from vertex v1 to vertex v2 is contained in the graph. Otherwise, it returns false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#find","title":"Edges.find","content":"Edges.find \nfind \n\nLookup a labeled edge in the graph. Raising KeyNotFoundException if no binding exists in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#tryFind","title":"Edges.tryFind","content":"Edges.tryFind \ntryFind \n\nLookup a labeled edge in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#undirect","title":"Edges.undirect","content":"Edges.undirect \nundirect \n\nTransforms a directed graph to an undirected graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#rev","title":"Edges.rev","content":"Edges.rev \nrev \n\nReverses all edges in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#tryAdd","title":"Edges.tryAdd","content":"Edges.tryAdd \ntryAdd \n\nAdds a labeled, directed edge to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#add","title":"Edges.add","content":"Edges.add \nadd \n\nAdds a labeled, directed edge to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#tryAddMany","title":"Edges.tryAddMany","content":"Edges.tryAddMany \ntryAddMany \n\nAdds a list of labeled, directed edges to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#addMany","title":"Edges.addMany","content":"Edges.addMany \naddMany \n\nAdds a list of labeled, directed edges to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#remove","title":"Edges.remove","content":"Edges.remove \nremove \n\nRemoves an edge from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#removeMany","title":"Edges.removeMany","content":"Edges.removeMany \nremoveMany \n\nRemoves a list of edges from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#toEdgeList","title":"Edges.toEdgeList","content":"Edges.toEdgeList \ntoEdgeList \n\nCreates a list of all edges and their labels.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#map","title":"Edges.map","content":"Edges.map \nmap \n\nMaps edgelabels of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#iter","title":"Edges.iter","content":"Edges.iter \niter \n\nPerforms a given function on every edge of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#iteri","title":"Edges.iteri","content":"Edges.iteri \niteri \n\nPerforms a given function on every edge of the graph, which also receives an ascending integer index.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#fold","title":"Edges.fold","content":"Edges.fold \nfold \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-edges.html#filter","title":"Edges.filter","content":"Edges.filter \nfilter \n\n Returns a new graph containing only the edges for which the given predicate returns true.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-graph.html","title":"Graph","content":"Graph \n \nGraph.create \ncreate \nGraph.toAdjacencyMatrix \ntoAdjacencyMatrix \nGraph.toAdjacencyMatrixBy \ntoAdjacencyMatrixBy"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-graph.html#create","title":"Graph.create","content":"Graph.create \ncreate \n\nCreates a directed graph from a list of vertices and a list of edges\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-graph.html#toAdjacencyMatrix","title":"Graph.toAdjacencyMatrix","content":"Graph.toAdjacencyMatrix \ntoAdjacencyMatrix \n\nTransforms a graph into an adjacency matrix of its edges.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-graph.html#toAdjacencyMatrixBy","title":"Graph.toAdjacencyMatrixBy","content":"Graph.toAdjacencyMatrixBy \ntoAdjacencyMatrixBy \n\nTransfroms a graph into a adjacency matrix, maps every edge using the projection.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-models.html","title":"Models","content":"Models \n \nModels.gilbert \ngilbert \nModels.erdosRenyi \nerdosRenyi"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-models.html#gilbert","title":"Models.gilbert","content":"Models.gilbert \ngilbert \n\nCreates a directed graph of vertexcount n and edge probability p\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-models.html#erdosRenyi","title":"Models.erdosRenyi","content":"Models.erdosRenyi \nerdosRenyi \n\nCreates a directed graph of vertexcount v and edgecount e\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html","title":"Vertices","content":"Vertices \n\nFunctions for vertices of directed Graphs\n \nVertices.predecessors \npredecessors \nVertices.successors \nsuccessors \nVertices.neighbours \nneighbours \nVertices.inwardDegree \ninwardDegree \nVertices.outwardDegree \noutwardDegree \nVertices.degree \ndegree \nVertices.clusteringCoefficient \nclusteringCoefficient \nVertices.inwardEdges \ninwardEdges \nVertices.outwardEdges \noutwardEdges \nVertices.tovertexList \ntovertexList"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#predecessors","title":"Vertices.predecessors","content":"Vertices.predecessors \npredecessors \n\nLists the vertices which have edges pointing to the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#successors","title":"Vertices.successors","content":"Vertices.successors \nsuccessors \n\nLists the vertices which have edges pointing away from the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#neighbours","title":"Vertices.neighbours","content":"Vertices.neighbours \nneighbours \n\nLists the vertices which are connected to the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#inwardDegree","title":"Vertices.inwardDegree","content":"Vertices.inwardDegree \ninwardDegree \n\nEvaluates the number of edges pointing to the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#outwardDegree","title":"Vertices.outwardDegree","content":"Vertices.outwardDegree \noutwardDegree \n\nEvaluates the number of edges pointing away from the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#degree","title":"Vertices.degree","content":"Vertices.degree \ndegree \n\nEvaluates the number of edges associated with the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#clusteringCoefficient","title":"Vertices.clusteringCoefficient","content":"Vertices.clusteringCoefficient \nclusteringCoefficient \n\nEvaluates the clustering coefficient of the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#inwardEdges","title":"Vertices.inwardEdges","content":"Vertices.inwardEdges \ninwardEdges \n\n Returns all edges pointing to the given vertex\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#outwardEdges","title":"Vertices.outwardEdges","content":"Vertices.outwardEdges \noutwardEdges \n\n Returns all edges pointing away from the given vertex\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-directed-vertices.html#tovertexList","title":"Vertices.tovertexList","content":"Vertices.tovertexList \ntovertexList \n\nCreates a list of all vertices and their labels.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html","title":"Edges","content":"Edges \n\nFunctions for edges of undirected Graphs\n \nEdges.count \ncount \nEdges.contains \ncontains \nEdges.find \nfind \nEdges.tryFind \ntryFind \nEdges.tryAdd \ntryAdd \nEdges.add \nadd \nEdges.tryAddMany \ntryAddMany \nEdges.addMany \naddMany \nEdges.remove \nremove \nEdges.removeMany \nremoveMany \nEdges.toEdgeList \ntoEdgeList \nEdges.map \nmap \nEdges.iter \niter \nEdges.iteri \niteri \nEdges.fold \nfold"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#count","title":"Edges.count","content":"Edges.count \ncount \n\nEvaluates the number of edges in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#contains","title":"Edges.contains","content":"Edges.contains \ncontains \n\nReturns true, if the edge from vertex v1 to vertex v2 is contained in the graph. Otherwise, it returns false.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#find","title":"Edges.find","content":"Edges.find \nfind \n\nLookup a labeled edge in the graph. Raising KeyNotFoundException if no binding exists in the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#tryFind","title":"Edges.tryFind","content":"Edges.tryFind \ntryFind \n\nLookup a labeled edge in the graph, returning a Some value if a binding exists and None if not.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#tryAdd","title":"Edges.tryAdd","content":"Edges.tryAdd \ntryAdd \n\nAdds a labeled, undirected edge to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#add","title":"Edges.add","content":"Edges.add \nadd \n\nAdds a labeled, undirected edge to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#tryAddMany","title":"Edges.tryAddMany","content":"Edges.tryAddMany \ntryAddMany \n\nAdds a list of labeled, undirected edges to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#addMany","title":"Edges.addMany","content":"Edges.addMany \naddMany \n\nAdds a list of labeled, undirected edges to the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#remove","title":"Edges.remove","content":"Edges.remove \nremove \n\nRemoves an edge from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#removeMany","title":"Edges.removeMany","content":"Edges.removeMany \nremoveMany \n\nRemoves a list of edges from the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#toEdgeList","title":"Edges.toEdgeList","content":"Edges.toEdgeList \ntoEdgeList \n\nCreates a list of all edges and their labels.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#map","title":"Edges.map","content":"Edges.map \nmap \n\nMaps edgelabels of the graph.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#iter","title":"Edges.iter","content":"Edges.iter \niter \n\nPerforms a given function on every edge of the graph.                \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#iteri","title":"Edges.iteri","content":"Edges.iteri \niteri \n\nPerforms a given function on every edge of the graph, which also receives an ascending integer index.                                    \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-edges.html#fold","title":"Edges.fold","content":"Edges.fold \nfold \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-graph.html","title":"Graph","content":"Graph \n \nGraph.create \ncreate \nGraph.toAdjacencyMatrix \ntoAdjacencyMatrix \nGraph.toAdjacencyMatrixBy \ntoAdjacencyMatrixBy"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-graph.html#create","title":"Graph.create","content":"Graph.create \ncreate \n\nCreates an undirected graph from a list of vertices and a list of edges\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-graph.html#toAdjacencyMatrix","title":"Graph.toAdjacencyMatrix","content":"Graph.toAdjacencyMatrix \ntoAdjacencyMatrix \n\nTransforms a graph into a adjacency matrix of its edges. If there is no edge between two vertices, the noEdgeValue is used.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-graph.html#toAdjacencyMatrixBy","title":"Graph.toAdjacencyMatrixBy","content":"Graph.toAdjacencyMatrixBy \ntoAdjacencyMatrixBy \n\nTransfroms a graph into a adjacency matrix, maps every edge using the projection.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-vertices.html","title":"Vertices","content":"Vertices \n\nFunctions for vertices of undirected Graphs\n \nVertices.neighbours \nneighbours \nVertices.degree \ndegree \nVertices.clusteringCoefficient \nclusteringCoefficient \nVertices.tovertexList \ntovertexList"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-vertices.html#neighbours","title":"Vertices.neighbours","content":"Vertices.neighbours \nneighbours \n\nLists the vertices which are connected to the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-vertices.html#degree","title":"Vertices.degree","content":"Vertices.degree \ndegree \n\nEvaluates the number of edges associated with the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-vertices.html#clusteringCoefficient","title":"Vertices.clusteringCoefficient","content":"Vertices.clusteringCoefficient \nclusteringCoefficient \n\nEvaluates the clustering coefficient of the vertex.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-fgl-undirected-vertices.html#tovertexList","title":"Vertices.tovertexList","content":"Vertices.tovertexList \ntovertexList \n\nCreates a list of all vertices and their labels.\n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-edge-1.html","title":"Edge\u003C\u0027Vertex\u003E","content":"Edge\u003C\u0027Vertex\u003E \n\nUnlabeled edge\n \nEdge\u003C\u0027Vertex\u003E.Item1 \nItem1 \nEdge\u003C\u0027Vertex\u003E.Item2 \nItem2"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-edge-1.html#Item1","title":"Edge\u003C\u0027Vertex\u003E.Item1","content":"Edge\u003C\u0027Vertex\u003E.Item1 \nItem1 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-edge-1.html#Item2","title":"Edge\u003C\u0027Vertex\u003E.Item2","content":"Edge\u003C\u0027Vertex\u003E.Item2 \nItem2 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-ledge-2.html","title":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E","content":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E \n\nLabeled edge\n \nLEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item1 \nItem1 \nLEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item2 \nItem2 \nLEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item3 \nItem3"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-ledge-2.html#Item1","title":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item1","content":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item1 \nItem1 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-ledge-2.html#Item2","title":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item2","content":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item2 \nItem2 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-ledge-2.html#Item3","title":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item3","content":"LEdge\u003C\u0027Vertex, \u0027Edge\u003E.Item3 \nItem3 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-lvertex-2.html","title":"LVertex\u003C\u0027Vertex, \u0027Label\u003E","content":"LVertex\u003C\u0027Vertex, \u0027Label\u003E \n\nLabeled vertex\n \nLVertex\u003C\u0027Vertex, \u0027Label\u003E.Item1 \nItem1 \nLVertex\u003C\u0027Vertex, \u0027Label\u003E.Item2 \nItem2"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-lvertex-2.html#Item1","title":"LVertex\u003C\u0027Vertex, \u0027Label\u003E.Item1","content":"LVertex\u003C\u0027Vertex, \u0027Label\u003E.Item1 \nItem1 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-lvertex-2.html#Item2","title":"LVertex\u003C\u0027Vertex, \u0027Label\u003E.Item2","content":"LVertex\u003C\u0027Vertex, \u0027Label\u003E.Item2 \nItem2 \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf.html","title":"GDF","content":"GDF \n \nGDF.GDFValue \nGDFValue \nGDF.fromArray \nfromArray \nGDF.fromFile \nfromFile \nGDF.toFile \ntoFile"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf.html#fromArray","title":"GDF.fromArray","content":"GDF.fromArray \nfromArray \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf.html#fromFile","title":"GDF.fromFile","content":"GDF.fromFile \nfromFile \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf.html#toFile","title":"GDF.toFile","content":"GDF.toFile \ntoFile \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf-gdfvalue.html","title":"GDFValue","content":"GDFValue \n \nGDFValue.VARCHAR \nVARCHAR \nGDFValue.BOOLEAN \nBOOLEAN \nGDFValue.DOUBLE \nDOUBLE \nGDFValue.INTEGER \nINTEGER"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf-gdfvalue.html#VARCHAR","title":"GDFValue.VARCHAR","content":"GDFValue.VARCHAR \nVARCHAR \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf-gdfvalue.html#BOOLEAN","title":"GDFValue.BOOLEAN","content":"GDFValue.BOOLEAN \nBOOLEAN \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf-gdfvalue.html#DOUBLE","title":"GDFValue.DOUBLE","content":"GDFValue.DOUBLE \nDOUBLE \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/reference/fsharp-graph-io-gdf-gdfvalue.html#INTEGER","title":"GDFValue.INTEGER","content":"GDFValue.INTEGER \nINTEGER \n"},{"uri":"https://csbiology.github.io/FSharp.FGL/index.html","title":"FSharp.FGL\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I @\u0022../bin/FSharp.FGL/netstandard2.0/\u0022\n#I @\u0022../bin/FSharp.Graph/netstandard2.0/\u0022\n\n(**\n# FSharp.FGL\nFSharp.FGL is a functional library to work with graphs. \n\u003Cbr\u003E\n## Example\n\nThis example demonstrates using a function defined in this sample library.\n\u003Cbr\u003E\n*)\n#r \u0022FSharp.FGL.dll\u0022\n#r \u0022FSharp.Graph\u0022\nopen FSharp.FGL \nopen FSharp.Graph\n\nGraph.empty\n|\u003E Vertices.addMany [(1,\u0022Look At Me Im VertexOne\u0022);(2,\u0022Look At Me Im VertexTwo\u0022)]\n|\u003E Undirected.Edges.add (1,2,\u0022Im An Edge Between VertexOne And VertexTwo \u0022)\n|\u003E Undirected.Edges.tryFind 1 2\n//Returns Some (1,2,\u0022Im An Edge Between VertexOne And VertexTwo \u0022)\n\n(**\n## Overview\n\nAt the moment there are \u003Cb\u003E2\u003C/b\u003E different graph representations available, each with teir own functions:\n\n* [FSharp.FGL](/content/tutorial.html), an inductive graph model that consists of so called contexts.\n* [ArrayAdjacencyGraph](/content/ArrayAdjacencyGraph.html), an adjacency list representation of a multigraph.\n\n*)\n\n(**\n\n## Samples \u0026 documentation\n\nThe library comes with comprehensible documentation. \nIt can include tutorials automatically generated from \u0060*.fsx\u0060 files in [the content folder][content]. \nThe API reference is automatically generated from comments in the library implementation.\n\n * [Tutorial](/content/tutorial.html) contains a further explanation of this sample library.\n\n * [API Reference](reference/index.html) contains automatically generated documentation for all types, modules\n   and functions in the library. This includes additional brief samples on using most of the\n   functions.\n   \n## Contributing and copyright\n\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding a new public API, please also \nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\nThe library is available under Public Domain license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/fsprojects/FSharp.FGL/tree/master/docs/content\n  [gh]: https://github.com/fsprojects/FSharp.FGL\n  [issues]: https://github.com/fsprojects/FSharp.FGL/issues\n  [readme]: https://github.com/fsprojects/FSharp.FGL/blob/master/README.md\n  [license]: https://github.com/fsprojects/FSharp.FGL/blob/master/LICENSE\n*)"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/AAGLouvain.html","title":"Louvain method for community detection","content":"(**\n---\ntitle: Louvain method for community detection\ncategory: ArrayAdjacencyGraph\ncategoryindex: 4\nindex: 4\n---\n*)\n\n(*** hide ***) \n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I @\u0022../../bin/FSharp.Graph/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.ArrayAdjacencyGraph/netstandard2.0/\u0022\n\n(**\n#Louvain method for community detection\n\u003Chr\u003E\n\u003Ca name=\u0022Louvain method for community detection\u0022\u003E\u003C/a\u003E\n## Louvain method for community detection\n*)\n\n#r \u0022FSharp.Graph\u0022\n#r \u0022FSharp.ArrayAdjacencyGraph\u0022\n\nopen FSharp.Graph\nopen FSharp.ArrayAdjacencyGraph\nopen ArrayAdjacencyGraph.Algorithms\n\n(**\n[The louvain method for communty detection](https://iopscience.iop.org/article/10.1088/1742-5468/2008/10/P10008) is a easy method to extract the community structure of large networks. It is based on the concept of modularity optimization.\nThe algorithm is divided into two phases that are repeated iteratively:\n\n* \u003Cb\u003EModularity optimization\u003C/b\u003E, in which every vertex is assigned its own community. After that, for each vertex its neighbours are used to calculate the gain of modularity by removing the vertex from its community and placing it in the community of a neighbour. The new commnuity for the vertex is the one with the biggest modularity gain. This is repeated until no furhter changes that increase the overall modularity can be done.\n* \u003Cb\u003ECommunity aggregation\u003C/b\u003E, in which the communities found are aggregated in order to build a new, reduced network of communities.\n\nThese steps are repeated until no further increase of modularity is possible.\n*)\n\n(**\n\u003Ca name=\u0022Example\u0022\u003E\u003C/a\u003E\n# Example\n## Example Graph\nThe first step of the tutorial is the creation of a graph that Louvain can analyse. In this case the graph was taken from [wikipedia](https://en.wikipedia.org/wiki/Community_structure#/media/File:Network_Community_Structure.svg).\n*)\n\n//Creating a list of labeled vertices\nlet vertexList : LVertex\u003Cint,string\u003E list =\n    [\n        for i=0 to 13 do\n            (i),(sprintf \u0022%i\u0022i)\n    ]\n\n//Creating a list of labeled edges\nlet edgeList : LEdge\u003Cint,float\u003E list =\n    [\n        0,1,1.; 0,2,1.; 1,2,1.; 1,3,1.;2,3,1.; 3,4,1.; 3,13,1.; 4,5,1.; 4,8,1.; \n        5,6,1.; 5,8,1.; 5,7,1.; 6,7,1.; 7,8,1.; 7,10,1.; 8,9,1.; 9,10,1.; \n        9,12,1.; 9,13,1.; 10,11,1.; 10,13,1.; 11,12,1.; 11,13,1.; 12,13,1.\n    ]\n\n//Creating a graph out of the two lists \nlet myGraph :ArrayAdjacencyGraph\u003Cint,string,float\u003E =\n    ArrayAdjacencyGraph(vertexList,edgeList)\n\n\n(**\n## Louvain algorithm\n\nThe application of the louvain algorithm on the example graph would look like this:\n\n*)\n\n//Returns the graph with the louvain calculation on top of it\nlet myGraphLouvain : ArrayAdjacencyGraph\u003Cint,string*int,float\u003E =\n    Louvain.Louvain.louvain myGraph 0.00001\n\n(*** hide ***)\n#r \u0022nuget: Cyjs.NET, 0.0.3\u0022\nopen Cyjs.NET\nlet inline toCyJS (g : ArrayAdjacencyGraph\u003Cint,string*int,float\u003E) =\n    let vertices = \n        Array.map2 (fun vertex label -\u003E (vertex,label)) (g.GetVertices()) (g.GetLabels())\n        |\u003E Array.map (fun (id,(ogLabel,newLabel)) -\u003E \n            match newLabel with\n                | 0 -\u003E Elements.node (string id) [CyParam.label (string ogLabel); CyParam.color \u0022red\u0022 ]\n                | 1 -\u003E Elements.node (string id) [CyParam.label (string ogLabel); CyParam.color \u0022green\u0022 ]\n                | 2 -\u003E Elements.node (string id) [CyParam.label (string ogLabel); CyParam.color \u0022blue\u0022 ]\n                | _ -\u003E Elements.node (string id) [CyParam.label (string ogLabel)]\n                )\n    let edges =\n        edgeList\n        |\u003E List.map (fun (v1,v2,weight) -\u003E Elements.edge (string v1 \u002B \u0022_\u0022 \u002B string v2) (string v1) (string v2) [CyParam.weight (weight)])\n    CyGraph.initEmpty ()\n    |\u003E CyGraph.withElements edges\n    |\u003E CyGraph.withElements vertices    \n    |\u003E CyGraph.withStyle \u0022node\u0022 \n        [\n            CyParam.content =. CyParam.label\n            CyParam.Text.Outline.color =. CyParam.color \n            CyParam.Background.color   =. CyParam.color\n        ]\n\n(**\n## Visualization\n\nThe visualization of the graph is made possible by means of [Cyjs.NET](https://fslab.org/Cyjs.NET/) and looks like this.\nThe different colors each represent their own community.\n\n*)\n\n(*** hide ***)\nmyGraphLouvain\n|\u003E toCyJS\n|\u003E CyGraph.withSize(600, 400) \n|\u003E CyGraph.withLayout (Layout.initCose id)\n|\u003E Cyjs.NET.HTML.toEmbeddedHTML\n(*** include-it-raw ***)"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/AAGModels.html","title":"Random graph models","content":"(**\n---\ntitle: Random graph models\ncategory: ArrayAdjacencyGraph\ncategoryindex: 4\nindex: 3\n---\n*)\n\n(*** hide ***) \n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I @\u0022../../bin/FSharp.Graph/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.ArrayAdjacencyGraph/netstandard2.0/\u0022\n\n(**\n#Random graph models\n\u003Chr\u003E\n\u003Ca name=\u0022Random graph models\u0022\u003E\u003C/a\u003E\n## Random graph models\n*)\n\n#r \u0022FSharp.Graph\u0022\n#r \u0022FSharp.ArrayAdjacencyGraph\u0022\n\nopen FSharp.Graph\nopen FSharp.ArrayAdjacencyGraph\nopen ArrayAdjacencyGraph.Models\n\n(**\nTo create random graph models, ArrayAdjacenyGraph includes three different methods:\n\u003Cbr\u003E\n\n*)\n\n(**\n\u003Ca name=\u0022Gilbert\u0022\u003E\u003C/a\u003E\n## Gilbert\n[The gilbert model](https://epubs.siam.org/doi/10.1137/0109045) (or G(N,p) model) was introduced by Edgar Gilbert in 1959. In this model, you assign a fixed amount of vertices N and a probability p. p denotes the probality, that edge between two vertices exists or not.\n*)\n\nopen Gilbert.Gilbert\n\n//Create a new random graph based on the gilbert graph model\nlet gilbertRandomGraph : ArrayAdjacencyGraph\u003Cint,string,float\u003E =\n    gilbert 100 0.1 false (id) (fun x -\u003E sprintf \u0022%i\u0022 x) (fun (a,b) -\u003E 1.)\n\n\n(**\n\u003Ca name=\u0022Barabasi-Albert\u0022\u003E\u003C/a\u003E\n## Barabasi-Albert\n[The Barabasi-Albert model](https://science.sciencemag.org/content/286/5439/509) is an algorithm for creating scale-free graphes where on an existing graph n vertices with m edges that are added to the vertex each iteration.\n*)\n\nopen BarabasiAlbert.BarabasiAlbert\n\n//Take a existing graph (here, the gilbertRandomGraph) and add the specified amount of vertices (50) with at least 5 edges connected to the new vertices\nlet barabasiAlbertGraph : ArrayAdjacencyGraph\u003Cint,string,float\u003E =\n    barabasiAlbert gilbertRandomGraph 50 5 (id) (fun x -\u003E sprintf \u0022%i\u0022 x) (fun (a,b) -\u003E 1.)\n\n(**\n\u003Ca name=\u0022Bollobas-Riordan\u0022\u003E\u003C/a\u003E\n## Bollobas-Riordan\n[The Bollobas-Riordan model](https://onlinelibrary.wiley.com/doi/abs/10.1002/3527602755.ch1), an implementation similar to barabasiAlbert, where the resulting graph can be easily influenced thanks to the three additional parameters.\n*)\n\nopen Scale_free_graph.BollobasRiordan\n\n//Create a graph following the bollobasRiordan graph model    \nlet bollobasRiordanGraph : ArrayAdjacencyGraph\u003Cint,int,float\u003E =\n    bollobasRiordan 100 0.6 0.1 0.3 0.5 0.5 (ArrayAdjacencyGraph())"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/AAGnewGraph.html","title":"Graph creation","content":"(**\n---\ntitle: Graph creation\ncategory: ArrayAdjacencyGraph\ncategoryindex: 4\nindex: 2\n---\n*)\n\n(*** hide ***) \n#I @\u0022../../bin/FSharp.Graph/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.ArrayAdjacencyGraph/netstandard2.0/\u0022\n\n\n(**\n\u003Ca name=\u0022Creating a Graph\u0022\u003E\u003C/a\u003E\n## Creating a Graph\n\nThe graph creation in ArrayAdjacencyGraph can be achived via two differnet approaches. \n\u003Cbr\u003E The easiest method is relies on a vertex list and an edge list like this :\n*)\n\n#r \u0022FSharp.Graph\u0022\n#r \u0022FSharp.ArrayAdjacencyGraph\u0022\n\nopen FSharp.Graph\nopen FSharp.ArrayAdjacencyGraph\n\n\n//Creating a list of labeled vertices\nlet vertexList : LVertex\u003Cint,string\u003E list = \n    List.init 4 (fun i -\u003E \n    i,\n    sprintf \u0022VertexNr. %i\u0022 i)\n\n//Creating a list of labeled edges\nlet edgeList : LEdge\u003Cint,float\u003E list = \n    [(1,2,1.);(2,1,1.);(1,3,0.5);(3,4,0.8);(4,3,0.8)]\n\n//Creating a graph out of the two lists \nlet myGraph : ArrayAdjacencyGraph\u003Cint,string,float\u003E =\n    ArrayAdjacencyGraph(vertexList,edgeList)\n\n(**\nAlternatively, an empty graph can be created and filled with vertices and edges after its creation.\n*)\n\n//Creating an array of the labeled vertices\nlet vertexArray : LVertex\u003Cint,string\u003E [] = \n    vertexList\n    |\u003E Array.ofList\n\n//Creating an array of the labeled edges\nlet edgeArray : LEdge\u003Cint,float\u003E [] = \n    edgeList\n    |\u003E Array.ofList\n\n//Creating an empty graph and filling it afterwards\nlet myGraph\u0027 : ArrayAdjacencyGraph\u003Cint,string,float\u003E =\n    \n    //Create a new, empty graph\n    let emptyGraph = ArrayAdjacencyGraph()\n    \n    //Add an array of vertices with the AddManyVertices method\n    emptyGraph.AddManyVertices(vertexArray)\n    \n    //Add an array of edges with the AddManyEdges method\n    emptyGraph.AddManyEdges(edgeArray)\n    \n    //Return the graph\n    emptyGraph\n\n(**\n\u003Ca name=\u0022Adding/Removing Vertices and Edges\u0022\u003E\u003C/a\u003E\n## Adding/Removing Vertices and Edges\nThe AddManyVertices and AddManyEdges, as well as their single counterparts AddVertex and AddEdge can be used at all times, allowing an easy modification of the graph. \n\u003Cbr\u003EAdding a vertex and an edge works like this:\n*)\n\n//New Vertex\nlet newVertex : LVertex\u003Cint,string\u003E = \n    123,\u0022123\u0022\n\n//Edge to new Vertex\nlet newEdge : LEdge\u003Cint,float\u003E =\n    1,123,10.\n\n//Add newVertex to myGraph\nmyGraph.AddVertex(newVertex)\n\n//Add newEdge to myGraph\nmyGraph.AddEdge(newEdge)\n\n(**\n\u003Cbr\u003E\n\u003Chr\u003E\nRemoving vertices and edges is also very easy. If you remove a vertex from the Graph all edges featuring this vertex are also removed. The removal of edges themself is simple as well. \n*)\n\n//Remove an edge from myGraph\nmyGraph.RemoveEdge(1,2,1.)\n\n//Remove a vertex from myGraph\nmyGraph.RemoveVertex(123)"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/ArrayAdjacencyGraph.html","title":"Basic functionality","content":"(**\n---\ntitle: Basic functionality\ncategory: ArrayAdjacencyGraph\ncategoryindex: 4\nindex: 1\n---\n*)\n\n(*** hide ***) \n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I @\u0022../../bin/FSharp.FGL/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.Graph/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.ArrayAdjacencyGraph/netstandard2.0/\u0022\n\n#r \u0022FSharp.FGL.dll\u0022\n#r \u0022FSharp.Graph\u0022\n#r \u0022FSharp.ArrayAdjacencyGraph\u0022\n\n(**\n#ArrayAdjacencyGraph\n\u003Chr\u003E\n\u003Ca name=\u0022Introduction\u0022\u003E\u003C/a\u003E\n## Introduction\nFSharp.ArrayAdjacencyGraph is an adjacency list representation of a multigraph. It is a modified verion of the [YaccConstructor/QuickGraph/ArrayAdjacencyGraph](https://github.com/YaccConstructor/QuickGraph/blob/master/src/QuickGraph/ArrayAdjacencyGraph.cs). \n\nThe model itself works on two different dictionaries, the label dictionary and the edge dictionary. Both feature vertices as keys. In case of the edge dictionary, the bound value is an array that includes all edges the vertex key is part of. \n\nWorking with this graph model allows for fast caculations on the edges \n\u003Ca name=\u0022Features\u0022\u003E\u003C/a\u003E\n## Features\nThe basic structure of the implementation is done as in [YaccConstructor/QuickGraph/ArrayAdjacencyGraph](https://github.com/YaccConstructor/QuickGraph/blob/master/src/QuickGraph/ArrayAdjacencyGraph.cs), with minor adjustments to fit FSharp better. \n\u003Cbr\u003EBuilding a second graph representation type into FSharp.FGL results in improvements like:\n\u003Cp class=\u0022indent\u0022\u003E- \u003Cb\u003Estreamlining\u003C/b\u003E ArrayAdjacencyGraph is not limited to directed/undirected and therefore allows for a smoother workflow \u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E- \u003Cb\u003Ereadability\u003C/b\u003E  ArrayAdjacencyGraph features an easy to read code that is easier to understand than the FSharp.FGL variant \u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E- \u003Cb\u003Espeed\u003C/b\u003E        Computation on the ArrayAdjacencyGraph model is generally faster compared to the inductive graph model \u003C/p\u003E\n\n*)"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/GDF.html","title":"GDF format reader","content":"(**\n---\ntitle: GDF format reader \ncategory: FSharp.Graph \ncategoryindex: 2 \nindex: 2 \n---\n*)\n(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I @\u0022../../bin/FSharp.FGL/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.Graph/netstandard2.0/\u0022\n\n#r \u0022FSharp.FGL.dll\u0022\n#r \u0022FSharp.Graph.dll\u0022\n(**\n# GDF Format\nGDF is the file formate used by [The Graph Exploration System (GUESS)](http://graphexploration.cond.org/) . It is build similar to a database table or \u003Cabbr title=\u0022Comma Seperated File\u0022\u003ECSV\u003C/abbr\u003E. Both edge and node data is defined in a single file, each initiated by their respective headers. Each element (i.e. node or edge) is on a line and values are separated by comma. Node definition is started by \u0022nodedef\u003Ename\u0022 and edge definition by \u0022edgedef\u003Enode1\u0022. For nodes, only the name is needed to build, but for edges both \u201Cnode1\u201D and \u201Cnode2\u201D are required, which are the names of the two nodes you are connecting.  \n\u003Cbr\u003E\n## Example\nThis example demonstrates a possible gdf data structure.\n\n\u003Cbr\u003E\n\n  nodedef\u003Ename VARCHAR,label VARCHAR\n  \u003Cbr\u003E\n  s1,Site number 1\n  \u003Cbr\u003E\n  s2,Site number 2\n  \u003Cbr\u003E\n  s3,Site number 3\n  \u003Cbr\u003E\n  edgedef\u003Enode1 VARCHAR,node2 VARCHAR, weight DOUBLE\n  \u003Cbr\u003E\n  s1,s2,1.2341\n  \u003Cbr\u003E\n  s2,s3,0.453\n  \u003Cbr\u003E\n  s3,s2, 2.34\n  \u003Cbr\u003E\n  s3,s1, 0.871\n  \u003Cbr\u003E\n\n\u003Cbr\u003E\n## Reading GDF files\nTo read GDF files, just use the ofFile function located in the gdf module of the FSharp.FGL.IO namespace. It does not need anything but the file path ans will return the vertices and edges as a vertex list, edge list tupel.\n*)\n\nopen FSharp.Graph.IO\n\nlet fileDir = __SOURCE_DIRECTORY__ \u002B \u0022/data/\u0022\n\nlet path = fileDir \u002B \u0022GDFExample.txt\u0022\n\nlet gdfFileRead = GDF.fromFile path\n\n\n\n(**\n\u003Cbr\u003E\nAdditionally, you can use the fromArray function instead of fromFile to directly transform an array to a vertex list, edge list tupel.\n\u003Cbr\u003E\n*)\n\nopen FSharp.Graph.IO\n\nlet gdfArrayRead = GDF.fromArray [|\u0022nodedef\u003Ename VARCHAR,label VARCHAR\u0022;\u0022s1,Site number 1\u0022;\u0022s2,Site number 2\u0022;\u0022edgedef\u003Enode1 VARCHAR,node2 VARCHAR,weight DOUBLE\u0022;\u0022s1,s2,1.2341\u0022|]\n\n(**\n##Writing GDF format files\nTo save a graph that takes the same form as a graph created by the reading GDF file functions, the toFile function can be applied. This function needs the vertex list and the edge list of the graph and saves the gdf file at the given path.\n*)\n\nopen FSharp.Graph.IO\n\nlet pathSave    = fileDir \u002B \u0022GDFExampleToFile.txt\u0022\n\nlet vertexList  = (fst gdfFileRead)\n\nlet edgeList    = (snd gdfFileRead)\n\nGDF.toFile vertexList edgeList pathSave"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/models.html","title":"Random graph models","content":"(**\n---\ntitle: Random graph models\ncategory: FSharp.FGL \ncategoryindex: 3\nindex: 3\n---\n*)\n(*** hide ***) \n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I @\u0022../../bin/FSharp.FGL/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.Graph/netstandard2.0/\u0022\n\n(**\n#Random graph models\n*)\n#r \u0022FSharp.FGL\u0022\n#r \u0022FSharp.Graph\u0022\nopen FSharp.FGL.Directed\n(**\n## Motivation and overview\nIn every implementation workflow, there comes the point where you have to test wether everything works as expexted or not.\nFor this, a matching test set is necessary. In some cases (e.g. List sorting algorithms) creating those test sets is done in a matter of seconds.\nIn other cases, especially if the data you work with is more than one dimensional, it can get quite tedious.\nTo this effect, FSharp.FGl comes equipped with implementations of random graph generation models.  \nIn this tutorial I want to introduce you to the models implemented and how to generate graphs with the given functions:\n    \n* [Gilbert model](models.html#Gilbert-model) (not scale free)\n\n* [Erd\u0151s\u2013R\u00E9nyi model](models.html#Erd\u0151s\u2013R\u00E9nyi-model) (not scale free)\n\n* Barab\u00E1si\u2013Albert model (scale free; work in progress)  \n\nAfterwards I\u0027ll give a quick intro about [how to use the implementations to create graphs of any type](models.html#Genericity).\n\n## Models\n### Gilbert model\n\nThe gilbert model (or G(N,p) model) was introduced by Edgar Gilbert in 1959. In this model, you assign a fixed amount of vertices N and a probability p.\np denotes the probality, that edge between two vertices exists or not.  \nThe function is located in the Models module and can be used in the following way:\n*)\n\nlet N = 50\nlet p = 0.5\n//This function takes an int and creates a labeled vertex ((id,label) tuple)\nlet vertexCreator i = (i,sprintf \u0022Call me Vertex nr. %i\u0022 i)\n\nlet myGilbertGraph = Models.gilbert vertexCreator N p\n\n(**\n### Erd\u0151s\u2013R\u00E9nyi model\n\nThe Erd\u0151s\u2013R\u00E9nyi model (or G(N,L) model) as used by P\u00E1l Erd\u0151s and Alfr\u00E9d R\u00E9nyi is a graph model where you assign a fixed vertex count and also a random edge count.\nThose edges then get randomly distributed between the given edges.\nThe function is located in the Models module and can be used in the following way:\n*)\n\nlet L = 200\n//We just use the vertexCreator and the nodeCount N assigned above\nlet myErdosRenyiGraph = Models.erdosRenyi vertexCreator N L\n\n(**\n## Genericity\nwork in progress\n*)"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/newgraph.html","title":"Basic functionality","content":"(**\n---\ntitle: Basic functionality\ncategory: FSharp.FGL \ncategoryindex: 3\nindex: 2 \n---\n*)\n(*** hide ***) \n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I @\u0022../../bin/FSharp.FGL/netstandard2.0/\u0022\n#I @\u0022../../bin/FSharp.Graph/netstandard2.0/\u0022\n\n(**\n#Basic functionality\n\nIn FSharp.FGL, the basic functions are separated into the Directed and the Undirected namespaces. Both undirected and directed graph functions use the same input type, but the information is read differently, depending on wether you call a function from the undirected or the directed namespace. Therefore it is advised to decide which kind of graph you work with beforehand. \nIn this quick tutorial we will work with directed Graphs.\n\n*)\n\n#r \u0022FSharp.FGL.dll\u0022\n#r \u0022FSharp.Graph\u0022\n\nopen FSharp.FGL\nopen FSharp.FGL.Directed\nopen FSharp.Graph\n\n(**\n## Creating a Graph\n\nThe Graph can be created by the \u0022Graph.empty\u0022 function. The Graph can then be filled by the \u0022Vertices.add\u0022/\u0022Vertices.addMany\u0022 and the \u0022Edges.add\u0022/\u0022Edges.addMany\u0022 functions. \nKeep in mind that FSharp.FGL does not support unlabeled edges and unlabeled vertices\n\n*)\n\n//Creating a list of labeled vertices\nlet vertexList : LVertex\u003Cint,string\u003E list = List.init 4 (fun i -\u003E \n        i \u002B 1,\n        sprintf \u0022VertexNr. %i\u0022 i \u002B 1)\n\n//Creating a list of labeled edges\nlet edgeList : LEdge\u003Cint,float\u003E list = [(1,2,1.);(2,1,1.);(1,3,0.5);(3,4,0.8);(4,3,0.8)]\n\n//Creating a graph out of the two lists can be done in different ways\nlet myGraph : Graph\u003Cint,string,float\u003E = \n    Graph.create vertexList edgeList\n\nlet myGraph\u0027 : Graph\u003Cint,string,float\u003E =\n    Graph.empty\n    |\u003E Vertices.addMany vertexList\n    |\u003E Edges.addMany edgeList\n\n(**\nThe Graph.create function is located in the Directed and in the Undirected namespaces. Therefore calling it while having one of those opened will result in building the according graph type.\nAdding and Removing single vertices or edges can be done with the following functions:\n*)\n\nlet myChangedGraph : Graph\u003Cint,string,float\u003E =\n    myGraph\n    |\u003E Vertices.add (5,\u0022VertexNr. 5\u0022)\n    |\u003E Edges.add (5,1,0.7)\n    |\u003E Edges.remove (2,1)\n\n(**\n\n## Iteration\n\ncoming soon\n*)"},{"uri":"https://csbiology.github.io/FSharp.FGL/content/tutorial.html","title":"Introduction","content":"(**\n---\ntitle: Introduction\ncategory: FSharp.FGL \ncategoryindex: 3\nindex: 1\n---\n*)\n(*** hide ***) \n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \u0022../../bin\u0022\n\n(**\n#Introduction\n\u003Chr\u003E\n\u003Ca name=\u0022InductiveGraph\u0022\u003E\u003C/a\u003E\n## Inductive Graph\nThe general aim of this FSharp.FGL is to provide an environment for F# programmers to functionally work with graphs. Besides the basic functions a graph-structure has to fulfill (like adding/removing vertices or counting edges), there are also functionalities needed which are not as elegantly and efficiently implementable in functional graphs (e.g. marking vertices as visited). This is tackled by Martin Erwig\u0027s [Inductive Graph Model](https://web.engr.oregonstate.edu/~erwig/papers/InductiveGraphs_JFP01.pdf). \n\nThe inductive graph consists of so called contexts. Every context carries the information about one vertex in the form (pred, id, l, succ) where:\u003Cbr\u003E\n\u003Cp class=\u0022indent\u0022\u003E-\u003Cb\u003Epred\u003C/b\u003E is a collection of all vertices pointing to this vertex\u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E-\u003Cb\u003Eid\u003C/b\u003E is the identifier of the vertex\u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E-\u003Cb\u003El\u003C/b\u003E is the label of the vertex\u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E-\u003Cb\u003Esucc\u003C/b\u003E is a collection of all vertices this vertex points to\u003C/p\u003E\nIn this structure, both pred and succ are of type adjacency. This type consists of the id of the other vertex and the edgelabel.\n\nWorking with the inductive graph model allows easy recursive walking through the graph because every vertex contains the information of it\u0027s edges to the other vertices. The so called [decompose-function]() then solves the problem of remembering which vertices were already visited by removing them from the graph.\n\n\u003Ca name=\u0022Features\u0022\u003E\u003C/a\u003E\n## Features\nThe basic structure of the implementation is done as in the [Hekate graph library](https://github.com/xyncro/hekate). Building a new library has many reasons:\n\u003Cp class=\u0022indent\u0022\u003E-FSharp.FGL was built with the intent to have easily readable code, so users can -if needed- design their own functions with the given structure more easily\u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E-The aforementioned decompose function is publicly accessible in FSharp.FGL. This is important for using path search algorithms more efficiently\u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E-The functions in FSharp.FGL are sorted into the Undirected and the Directed module. By this, users can more intuitively pick the right function for their purpose\u003C/p\u003E\n\u003Cp class=\u0022indent\u0022\u003E-FSharp.FGL aims to provide a thorough set of graph related functions, including path search functions and different graph models.\u003C/p\u003E\n\n*)"}]